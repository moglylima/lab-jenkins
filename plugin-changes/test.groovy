pipeline {
    agent any
    
    // Configura√ß√£o b√°sica
    options {
        disableConcurrentBuilds()
        timeout(time: 5, unit: 'MINUTES')
    }
    
    parameters {
        // Par√¢metro principal
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'prod'],
            description: 'Selecione o ambiente'
        )
        
        // Par√¢metro din√¢mico 1: Regi√µes
        activeChoice(
            name: 'AWS_REGION',
            description: 'Regi√£o AWS',
            choiceType: 'PT_SINGLE_SELECT',
            script: [
                $class: 'GroovyScript',
                script: [
                    script: '''
                        // Map de regi√µes por ambiente
                        def regions = [
                            'dev': ['us-east-1', 'sa-east-1'],
                            'prod': ['us-east-1', 'eu-west-1', 'ap-southeast-1']
                        ]
                        
                        // Retorna regi√µes baseadas no ambiente selecionado
                        return regions.get(params.ENVIRONMENT, ['Regi√£o n√£o definida'])
                    ''',
                    fallbackScript: "return ['Erro: Ambiente n√£o especificado']"
                ]
            ]
        )
        
        // Par√¢metro din√¢mico 2: Tipos de inst√¢ncia
        activeChoice(
            name: 'INSTANCE_TYPE',
            description: 'Tipo de inst√¢ncia EC2',
            choiceType: 'PT_SINGLE_SELECT',
            script: [
                $class: 'GroovyScript',
                script: [
                    script: '''
                        // Map de tipos por ambiente
                        def types = [
                            'dev': ['t3.micro', 't3.small'],
                            'prod': ['m5.large', 'm5.xlarge', 'c5.2xlarge']
                        ]
                        
                        // Retorna tipos baseados no ambiente selecionado
                        return types.get(params.ENVIRONMENT, ['Tipo n√£o definido'])
                    ''',
                    fallbackScript: "return ['Erro: Ambiente n√£o especificado']"
                ]
            ]
        )
    }
    
    stages {
        stage('Mostrar Sele√ß√µes') {
            steps {
                script {
                    echo "Ambiente selecionado: ${params.ENVIRONMENT}"
                    echo "Regi√£o AWS: ${params.AWS_REGION}"
                    echo "Tipo de Inst√¢ncia: ${params.INSTANCE_TYPE}"
                    
                    // Verificar se os valores s√£o v√°lidos
                    if (params.AWS_REGION == 'Regi√£o n√£o definida' || 
                        params.INSTANCE_TYPE == 'Tipo n√£o definido') {
                        error("Valores inv√°lidos selecionados!")
                    }
                }
            }
        }
        
        stage('Simular Cria√ß√£o') {
            steps {
                script {
                    echo "Simulando cria√ß√£o de inst√¢ncia..."
                    echo "üîß Configurando regi√£o: ${params.AWS_REGION}"
                    echo "üñ•Ô∏è  Usando tipo: ${params.INSTANCE_TYPE}"
                    echo "‚úÖ Simula√ß√£o conclu√≠da com sucesso!"
                }
            }
        }
    }
    
    post {
        always {
            echo "Fim da execu√ß√£o"
        }
    }
}